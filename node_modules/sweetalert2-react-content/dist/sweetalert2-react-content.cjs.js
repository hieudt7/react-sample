/** @preserve
  * package: sweetalert2-react-content v1.0.0
  * file: dist/sweetalert2-react-content.cjs.js
  * homepage: https://github.com/sweetalert2/sweetalert2-react-content#readme
  * license: MIT
  **/

'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = _interopDefault(require('react'));
var ReactDOM = _interopDefault(require('react-dom'));

var mounts = [{
  key: 'title',
  getter: function getter(swal) {
    return swal.getTitle();
  }
}, {
  key: 'html',
  getter: function getter(swal) {
    return swal.getContent();
  }
}, {
  key: 'confirmButtonText',
  getter: function getter(swal) {
    return swal.getConfirmButton();
  }
}, {
  key: 'cancelButtonText',
  getter: function getter(swal) {
    return swal.getCancelButton();
  }
}, {
  key: 'footer',
  getter: function getter(swal) {
    return swal.getFooter();
  }
}];

var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();

var get = function get(object, property, receiver) {
  if (object === null) object = Function.prototype;
  var desc = Object.getOwnPropertyDescriptor(object, property);

  if (desc === undefined) {
    var parent = Object.getPrototypeOf(object);

    if (parent === null) {
      return undefined;
    } else {
      return get(parent, property, receiver);
    }
  } else if ("value" in desc) {
    return desc.value;
  } else {
    var getter = desc.get;

    if (getter === undefined) {
      return undefined;
    }

    return getter.call(receiver);
  }
};

var inherits = function (subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
};

var possibleConstructorReturn = function (self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && (typeof call === "object" || typeof call === "function") ? call : self;
};

var noop = function noop() {};

function withReactContent(ParentSwal) {
  return function (_ParentSwal) {
    inherits(_class, _ParentSwal);

    function _class() {
      classCallCheck(this, _class);
      return possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).apply(this, arguments));
    }

    createClass(_class, [{
      key: '_main',
      value: function _main(params) {
        params = Object.assign({}, params);

        params.onOpen = params.onOpen || noop;
        params.onClose = params.onClose || noop;

        mounts.forEach(function (_ref) {
          var key = _ref.key,
              getter = _ref.getter;

          if (React.isValidElement(params[key])) {
            var reactElement = params[key];
            params[key] = ' ';

            var domElement = void 0;

            var superOnOpen = params.onOpen;
            params.onOpen = function () {
              domElement = getter(ParentSwal);
              ReactDOM.render(reactElement, domElement);
              superOnOpen();
            };

            var superOnClose = params.onClose;
            params.onClose = function () {
              superOnClose();
              ReactDOM.unmountComponentAtNode(domElement);
            };
          }
        });

        return get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), '_main', this).call(this, params);
      }
    }], [{
      key: 'argsToParams',
      value: function argsToParams(args) {
        if (React.isValidElement(args[0]) || React.isValidElement(args[1])) {
          var params = {};['title', 'html', 'type'].forEach(function (name, index) {
            if (args[index] !== undefined) {
              params[name] = args[index];
            }
          });
          return params;
        } else {
          return ParentSwal.argsToParams(args);
        }
      }
    }]);
    return _class;
  }(ParentSwal);
}

module.exports = withReactContent;
//# sourceMappingURL=sweetalert2-react-content.cjs.js.map
